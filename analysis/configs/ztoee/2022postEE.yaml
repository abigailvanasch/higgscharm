goldenjson: analysis/data/Cert_Collisions2022_355100_362760_Golden.txt
lumidata: analysis/data/lumi2022.csv
hlt_paths:
  - Ele30_WPTight_Gsf
object_selection:
  leptons:
    field: events.Electron
    cuts:
      pt: events.Electron.pt > 30
      abseta: np.abs(events.Electron.eta) < 2.4
      electron_id: wp80iso
  dileptons:
    field: select_dileptons
    cuts:
      dr: LorentzVector.delta_r(objects['dileptons'].l1, objects['dileptons'].l2) > 0.02
      opp_charge: objects['dileptons'].l1.charge * objects['dileptons'].l2.charge < 0
      mass_window: (objects['dileptons'].z.mass > 60.0) & (objects['dileptons'].z.mass < 120.0)
  jets:
    field: events.Jet
    cuts:
      pt: events.Jet.pt > 20
event_selection:
  selections:
    atleast_one_goodvertex: events.PV.npvsGood > 0
    lumimask: get_lumi_mask(events, goldenjson)
    trigger: get_trigger_mask(events, hlt_paths)
    trigger_matching: get_trigger_match_mask(events, events.Electron, hlt_paths)
    first_electron_pt: ak.firsts(objects['leptons'].pt) > 35
    two_leptons: ak.num(objects['leptons']) == 2
    one_z: ak.num(objects['dileptons'].z) == 1
  categories:
    ztoee:
      - atleast_one_goodvertex
      - lumimask
      - trigger
      - trigger_matching
      - first_electron_pt
      - two_leptons
      - one_z
histogram_config:
  add_syst_axis: true
  add_weight: true
  axes:
    dielectron_mass:
      type: Regular
      bins: 100
      start: 10
      stop: 150
      label: $m(ee)$ [GeV]
      expression: objects['dileptons'].z.mass
    dielectron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(ee)$ [GeV]
      expression: objects['dileptons'].z.pt
    dielectron_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(e_1, e_2)$
      expression: LorentzVector.delta_r(objects['dileptons'].l1, objects['dileptons'].l2)
    dielectron_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(e_1, e_2)|$
      expression: np.abs(objects['dileptons'].l1.eta - objects['dileptons'].l2.eta)
    leading_electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e_1)$ [GeV]
      expression: objects['dileptons'].l1.pt
    subleading_electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e_2)$ [GeV]
      expression: objects['dileptons'].l2.pt
    leading_electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e_1)$
      expression: objects['dileptons'].l1.eta
    subleading_electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e_2)$
      expression: objects['dileptons'].l2.eta
    electron_pt:
      type: Regular
      bins: 50
      start: 30
      stop: 300
      label: $p_T(e)$ [GeV]
      expression: objects['leptons'].pt
    electron_eta:
      type: Regular
      bins: 50
      start: -2.5
      stop: 2.5
      label: $\eta(e)$
      expression: objects['leptons'].eta
    electron_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(e)$
      expression: objects['leptons'].phi
    jet_pt:
      type: Regular
      bins: 50
      start: 20
      stop: 500
      label: $p_T(j)$ [GeV]
      expression: objects['jets'].pt
    jet_eta:
      type: Regular
      bins: 50
      start: -5
      stop: 5
      label: $\eta(j)$
      expression: objects['jets'].eta
    jet_phi:
      type: Regular
      bins: 50
      start: -3.14159
      stop: 3.14159
      label: $\phi(j)$
      expression: objects['jets'].phi
    leading_jet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvL
    leading_jet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Leading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].btagPNetCvB
    subleading_jet_cvsl:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsL
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvL
    subleading_jet_cvsb:
      type: Regular
      bins: 50
      start: 0
      stop: 1
      label: Subleading Jet CvsB
      expression: ak.pad_none(objects['jets'], target=2)[:, 1].btagPNetCvB
    jet_dr:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $\Delta R(j_1, j_2)$
      expression: ak.pad_none(objects['jets'], target=2)[:, 0].delta_r(ak.pad_none(objects['jets'], target=2)[:, 1])
    jet_deta:
      type: Regular
      bins: 50
      start: 0
      stop: 5
      label: $|\Delta \eta(j_1, j_2)|$
      expression: np.abs(ak.pad_none(objects['jets'], target=2)[:, 0].eta - ak.pad_none(objects['jets'], target=2)[:, 1].eta)
    jet_multiplicity:
      type: IntCategory
      categories:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
      label: $N(j)$
      expression: ak.num(objects['jets'])
  layout: individual